Refreshing Terraform state in-memory prior to plan...
module.edge.aws_cloudfront_origin_access_identity.default: Refreshing state...
module.edge.aws_cloudfront_cache_policy.default: Refreshing state...
module.network.aws_security_group.lb: Refreshing state...
module.network.aws_lb.application: Refreshing state...
module.network.aws_lb_listener.https: Refreshing state...
module.compute.aws_lambda_function.ingestor: Refreshing state...
module.compute.aws_lambda_permission.cdn_invoke: Refreshing state...
module.storage.aws_s3_bucket_state.terraform: Refreshing state...
module.storage.aws_dynamodb_table.locks: Refreshing state...
module.ops.aws_iam_policy.footguns_denied: Refreshing state...
module.ops.aws_iam_role.guardrails: Refreshing state...

<bliss>Success: Configuration validated. No syntax errors detected.</bliss>
<bliss>Plan: 3 to add, 1 to change, 0 to destroy.</bliss>

  # module.ops.aws_iam_policy.footguns_denied will be created
  + resource "aws_iam_policy" "footguns_denied" { ... }

  # module.edge.aws_cloudfront_distribution.cdn will be updated in-place
  ~ cache_behavior[0].min_ttl = 0 -> 60

  # module.compute.aws_lambda_function.ingestor will be created
  + resource "aws_lambda_function" "ingestor" { runtime = "python3.13" ... }

  # module.storage.aws_s3_bucket.assets will be created
  + resource "aws_s3_bucket" "assets" { bucket = "tcons-assets-xyz" ... }